# Stubs for sqlalchemy.dialects.mysql.base (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from array import array as _array
from typing import Any, Optional

from sqlalchemy.sql import compiler

from ... import schema as sa_schema
from ... import types as sqltypes
from ...engine import default as default
from ...engine import reflection as reflection
from ...sql import compiler as compiler
from ...sql import elements as elements
from ...types import BINARY as BINARY
from ...types import BLOB as BLOB
from ...types import BOOLEAN as BOOLEAN
from ...types import DATE as DATE
from ...types import VARBINARY as VARBINARY
from ...util import topological as topological
from . import reflection as _reflection
from .enumerated import ENUM as ENUM
from .enumerated import SET as SET
from .json import JSON as JSON
from .json import JSONIndexType as JSONIndexType
from .json import JSONPathType as JSONPathType
from .types import BIGINT as BIGINT
from .types import BIT as BIT
from .types import CHAR as CHAR
from .types import DATETIME as DATETIME
from .types import DECIMAL as DECIMAL
from .types import DOUBLE as DOUBLE
from .types import FLOAT as FLOAT
from .types import INTEGER as INTEGER
from .types import LONGBLOB as LONGBLOB
from .types import LONGTEXT as LONGTEXT
from .types import MEDIUMBLOB as MEDIUMBLOB
from .types import MEDIUMINT as MEDIUMINT
from .types import MEDIUMTEXT as MEDIUMTEXT
from .types import NCHAR as NCHAR
from .types import NUMERIC as NUMERIC
from .types import NVARCHAR as NVARCHAR
from .types import REAL as REAL
from .types import SMALLINT as SMALLINT
from .types import TEXT as TEXT
from .types import TIME as TIME
from .types import TIMESTAMP as TIMESTAMP
from .types import TINYBLOB as TINYBLOB
from .types import TINYINT as TINYINT
from .types import TINYTEXT as TINYTEXT
from .types import VARCHAR as VARCHAR
from .types import YEAR as YEAR
from .types import _FloatType as _FloatType
from .types import _IntegerType as _IntegerType
from .types import _MatchType as _MatchType
from .types import _NumericType as _NumericType
from .types import _StringType as _StringType

RESERVED_WORDS: Any = ...
AUTOCOMMIT_RE: Any = ...
SET_RE: Any = ...
MSTime: Any = ...
MSSet: Any = ...
MSEnum: Any = ...
MSLongBlob: Any = ...
MSMediumBlob: Any = ...
MSTinyBlob: Any = ...
MSBlob: Any = ...
MSBinary: Any = ...
MSVarBinary: Any = ...
MSNChar: Any = ...
MSNVarChar: Any = ...
MSChar: Any = ...
MSString: Any = ...
MSLongText: Any = ...
MSMediumText: Any = ...
MSTinyText: Any = ...
MSText: Any = ...
MSYear: Any = ...
MSTimeStamp: Any = ...
MSBit: Any = ...
MSSmallInteger: Any = ...
MSTinyInteger: Any = ...
MSMediumInteger: Any = ...
MSBigInteger: Any = ...
MSNumeric: Any = ...
MSDecimal: Any = ...
MSDouble: Any = ...
MSReal: Any = ...
MSFloat: Any = ...
MSInteger: Any = ...
colspecs: Any = ...
ischema_names: Any = ...

class MySQLExecutionContext(default.DefaultExecutionContext):
    def should_autocommit_text(self, statement): ...
    def create_server_side_cursor(self): ...

class MySQLCompiler(compiler.SQLCompiler):
    render_table_with_column_in_update_from: bool = ...
    extract_map: Any = ...
    def visit_random_func(self, fn, **kw): ...
    def visit_utc_timestamp_func(self, fn, **kw): ...
    def visit_sysdate_func(self, fn, **kw): ...
    def visit_json_getitem_op_binary(self, binary, operator, **kw): ...
    def visit_json_path_getitem_op_binary(self, binary, operator, **kw): ...
    def visit_concat_op_binary(self, binary, operator, **kw): ...
    def visit_match_op_binary(self, binary, operator, **kw): ...
    def get_from_hint_text(self, table, text): ...
    def visit_typeclause(self, *args, **kw): ...
    def visit_cast(self, cast, **kw): ...
    def render_literal_value(self, value, type_): ...
    def visit_true(self, element, **kw): ...
    def visit_false(self, element, **kw): ...
    def get_select_precolumns(self, select, **kw): ...
    def visit_join(self, join, asfrom: bool = ..., **kwargs): ...
    def for_update_clause(self, select, **kw): ...
    def limit_clause(self, select, **kw): ...
    def update_limit_clause(self, update_stmt): ...
    def update_tables_clause(self, update_stmt, from_table, extra_froms, **kw): ...
    def update_from_clause(
        self, update_stmt, from_table, extra_froms, from_hints, **kw
    ): ...

class MySQLDDLCompiler(compiler.DDLCompiler):
    def get_column_specification(self, column, **kw): ...
    def post_create_table(self, table): ...
    def visit_create_index(self, create): ...
    def visit_primary_key_constraint(self, constraint): ...
    def visit_drop_index(self, drop): ...
    def visit_drop_constraint(self, drop): ...
    def define_constraint_match(self, constraint): ...

class MySQLTypeCompiler(compiler.GenericTypeCompiler):
    def visit_NUMERIC(self, type_, **kw): ...
    def visit_DECIMAL(self, type_, **kw): ...
    def visit_DOUBLE(self, type_, **kw): ...
    def visit_REAL(self, type_, **kw): ...
    def visit_FLOAT(self, type_, **kw): ...
    def visit_INTEGER(self, type_, **kw): ...
    def visit_BIGINT(self, type_, **kw): ...
    def visit_MEDIUMINT(self, type_, **kw): ...
    def visit_TINYINT(self, type_, **kw): ...
    def visit_SMALLINT(self, type_, **kw): ...
    def visit_BIT(self, type_, **kw): ...
    def visit_DATETIME(self, type_, **kw): ...
    def visit_DATE(self, type_, **kw): ...
    def visit_TIME(self, type_, **kw): ...
    def visit_TIMESTAMP(self, type_, **kw): ...
    def visit_YEAR(self, type_, **kw): ...
    def visit_TEXT(self, type_, **kw): ...
    def visit_TINYTEXT(self, type_, **kw): ...
    def visit_MEDIUMTEXT(self, type_, **kw): ...
    def visit_LONGTEXT(self, type_, **kw): ...
    def visit_VARCHAR(self, type_, **kw): ...
    def visit_CHAR(self, type_, **kw): ...
    def visit_NVARCHAR(self, type_, **kw): ...
    def visit_NCHAR(self, type_, **kw): ...
    def visit_VARBINARY(self, type_, **kw): ...
    def visit_JSON(self, type_, **kw): ...
    def visit_large_binary(self, type_, **kw): ...
    def visit_enum(self, type_, **kw): ...
    def visit_BLOB(self, type_, **kw): ...
    def visit_TINYBLOB(self, type_, **kw): ...
    def visit_MEDIUMBLOB(self, type_, **kw): ...
    def visit_LONGBLOB(self, type_, **kw): ...
    def visit_ENUM(self, type_, **kw): ...
    def visit_SET(self, type_, **kw): ...
    def visit_BOOLEAN(self, type, **kw): ...

class MySQLIdentifierPreparer(compiler.IdentifierPreparer):
    reserved_words: Any = ...
    def __init__(self, dialect, server_ansiquotes: bool = ..., **kw) -> None: ...

class MySQLDialect(default.DefaultDialect):
    name: str = ...
    supports_alter: bool = ...
    supports_native_boolean: bool = ...
    max_identifier_length: int = ...
    max_index_name_length: int = ...
    supports_native_enum: bool = ...
    supports_sane_rowcount: bool = ...
    supports_sane_multi_rowcount: bool = ...
    supports_multivalues_insert: bool = ...
    default_paramstyle: str = ...
    colspecs: Any = ...
    statement_compiler: Any = ...
    ddl_compiler: Any = ...
    type_compiler: Any = ...
    ischema_names: Any = ...
    preparer: Any = ...
    construct_arguments: Any = ...
    isolation_level: Any = ...
    def __init__(
        self,
        isolation_level: Optional[Any] = ...,
        json_serializer: Optional[Any] = ...,
        json_deserializer: Optional[Any] = ...,
        **kwargs
    ) -> None: ...
    def on_connect(self): ...
    def set_isolation_level(self, connection, level): ...
    def get_isolation_level(self, connection): ...
    def do_commit(self, dbapi_connection): ...
    def do_rollback(self, dbapi_connection): ...
    def do_begin_twophase(self, connection, xid): ...
    def do_prepare_twophase(self, connection, xid): ...
    def do_rollback_twophase(
        self, connection, xid, is_prepared: bool = ..., recover: bool = ...
    ): ...
    def do_commit_twophase(
        self, connection, xid, is_prepared: bool = ..., recover: bool = ...
    ): ...
    def do_recover_twophase(self, connection): ...
    def is_disconnect(self, e, connection, cursor): ...
    def has_table(self, connection, table_name, schema: Optional[Any] = ...): ...
    identifier_preparer: Any = ...
    def initialize(self, connection): ...
    def get_schema_names(self, connection, **kw): ...
    def get_table_names(self, connection, schema: Optional[Any] = ..., **kw): ...
    def get_view_names(self, connection, schema: Optional[Any] = ..., **kw): ...
    def get_table_options(
        self, connection, table_name, schema: Optional[Any] = ..., **kw
    ): ...
    def get_columns(
        self, connection, table_name, schema: Optional[Any] = ..., **kw
    ): ...
    def get_pk_constraint(
        self, connection, table_name, schema: Optional[Any] = ..., **kw
    ): ...
    def get_foreign_keys(
        self, connection, table_name, schema: Optional[Any] = ..., **kw
    ): ...
    def get_indexes(
        self, connection, table_name, schema: Optional[Any] = ..., **kw
    ): ...
    def get_unique_constraints(
        self, connection, table_name, schema: Optional[Any] = ..., **kw
    ): ...
    def get_view_definition(
        self, connection, view_name, schema: Optional[Any] = ..., **kw
    ): ...

class _DecodingRowProxy(object):
    rowproxy: Any = ...
    charset: Any = ...
    def __init__(self, rowproxy, charset) -> None: ...
    def __getitem__(self, index): ...
    def __getattr__(self, attr): ...
